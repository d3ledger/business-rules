<?xml version = "1.0" encoding = "UTF-8"?>

<!--
  ~ Copyright Soramitsu Co., Ltd. All Rights Reserved.
  ~ SPDX-License-Identifier: Apache-2.0
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/util
  http://www.springframework.org/schema/util/spring-util.xsd">

  <!-- PATH TO THE PROPERTIES FILE -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    <property name="locations">
      <list>
        <value>classpath:application.properties</value>
        <value>classpath:rmq.properties</value>
      </list>
    </property>
  </bean>

  <!-- BRVS PORT -->
  <bean id="port" name="brvsPort" class="java.lang.String">
    <constructor-arg name="original" value="${BRVS_PORT}"/>
  </bean>

  <!-- KEY PAIR DEFINITION -->
  <bean id="brvsAccountKeyPair" class="jp.co.soramitsu.iroha.java.Utils"
    factory-method="parseHexKeypair">
    <constructor-arg name="hexPublicKey" value="${CREDENTIAL_PUBKEY}"/>
    <constructor-arg name="hexPrivateKey" value="${CREDENTIAL_PRIVKEY}"/>
  </bean>
  <bean id="keysList" class="iroha.validation.utils.ValidationUtils"
    factory-method="generateOrImportKeypairs">
    <constructor-arg name="amount" value="${BRVS_USERKEYSCOUNT}"/>
    <constructor-arg name="path" value="${BRVS_USERKEYSPATH}"/>
  </bean>
  <bean id="firstUserKey" class="iroha.validation.utils.ValidationUtils"
    factory-method="generateOrImportFirstKeypair">
    <constructor-arg name="path" value="${BRVS_USERKEYSPATH}"/>
  </bean>

  <!-- IROHA API IPJ CONFIG -->
  <bean id="irohaAPI" class="jp.co.soramitsu.iroha.java.IrohaAPI">
    <constructor-arg name="host" value="${IROHA_HOST}"/>
    <constructor-arg name="port" value="${IROHA_PORT}"/>
  </bean>
  <bean id="queryAPI" class="jp.co.soramitsu.iroha.java.QueryAPI">
    <constructor-arg name="api" ref="irohaAPI"/>
    <constructor-arg name="accountId" value="${CREDENTIAL_ACCOUNTID}"/>
    <constructor-arg name="keyPair" ref="brvsAccountKeyPair"/>
  </bean>

  <!-- IROHA QUERY HELPER CONFIG -->
  <bean id="queryHelper" class="com.d3.commons.sidechain.iroha.util.impl.IrohaQueryHelperImpl">
    <constructor-arg name="queryAPI" ref="queryAPI"/>
  </bean>

  <!-- VERDICT STORAGE CONFIG -->
  <bean id="mongoVerdictStorage"
    class="iroha.validation.transactions.core.storage.impl.mongo.MongoTransactionVerdictStorage">
    <constructor-arg name="mongoHost" value="${MONGO_HOST}"/>
    <constructor-arg name="mongoPort" value="${MONGO_PORT}"/>
  </bean>

  <!-- USER STORAGE CONFIG -->
  <bean id="userStorage" class="iroha.validation.transactions.core.provider.impl.RegisteredUsersStorageImpl">
    <constructor-arg name="mongoHost" value="${MONGO_HOST}"/>
    <constructor-arg name="mongoPort" value="${MONGO_PORT}"/>
  </bean>

  <!-- USER ACCOUNTS MANAGER CONFIG -->
  <bean id="accountManager"
    class="iroha.validation.transactions.core.provider.impl.AccountManager">
    <constructor-arg name="queryAPI" ref="queryAPI"/>
    <constructor-arg name="userSignatoriesAttribute" value="${USER_SIGNATORIES_KEY}"/>
    <constructor-arg name="userDomains" value="${BRVS_USERDOMAINS}"/>
    <constructor-arg name="userAccountsHolderAccount" value="${ACCOUNTS_HOLDER}"/>
    <constructor-arg name="userAccountsSetterAccount" value="${ACCOUNTS_HOLDER_SETTER}"/>
    <constructor-arg name="keyPairs" ref="keysList"/>
    <constructor-arg name="irohaQueryHelper" ref="queryHelper"/>
    <constructor-arg name="registeredUsersStorage" ref="userStorage"/>
  </bean>

  <!--  SORA PROJECT PROVIDER CONFIG-->
  <bean id="soraProjectsProvider"
    class="iroha.validation.transactions.plugin.impl.sora.ProjectAccountProvider">
    <constructor-arg name="irohaQueryHelper" ref="queryHelper"/>
    <constructor-arg name="accountsHolder" value="${SORA_DISTRIBUTION_PROJECTS_HOLDER}"/>
    <constructor-arg name="accountsSetter" value="${SORA_DISTRIBUTION_PROJECTS_SETTER}"/>
  </bean>

  <!--  SORA DISTRIBUTION CONFIG-->
  <bean id="soraDistributionLogic"
    class="iroha.validation.transactions.plugin.impl.sora.SoraDistributionPluggableLogic">
    <constructor-arg name="queryAPI" ref="queryAPI"/>
    <constructor-arg name="infoSetterAccount" value="${SORA_DISTRIBUTION_SETTER}"/>
    <constructor-arg name="billingRule" ref="billingRule"/>
    <constructor-arg name="projectAccountProvider" ref="soraProjectsProvider"/>
    <constructor-arg name="irohaQueryHelper" ref="queryHelper"/>
  </bean>

  <!--  QUORUM REACTION CONFIG-->
  <bean id="quorumReactionLogic"
    class="iroha.validation.transactions.plugin.impl.QuorumReactionPluggableLogic">
    <constructor-arg name="accountManager" ref="accountManager"/>
  </bean>

  <!--  REGISTRATION REACTION CONFIG-->
  <bean id="registrationReactionLogic"
    class="iroha.validation.transactions.plugin.impl.RegistrationReactionPluggableLogic">
    <constructor-arg name="registrationProvider" ref="accountManager"/>
  </bean>

  <!--  PROJECT ACCOUNTS REACTION CONFIG-->
  <bean id="projectAccountsReactionLogic"
    class="iroha.validation.transactions.plugin.impl.sora.NewProjectReactionPluggableLogic">
    <constructor-arg name="projectAccountProvider" ref="soraProjectsProvider"/>
  </bean>

  <!-- ATOMIC REFERENCE OF WITHDRAWAL LIMITS-->
  <bean id="xorWithdrawalLimitRemainderReference"
    class="java.util.concurrent.atomic.AtomicReference"/>

  <!-- WITHDRAWAL REACTION LOGIC-->
  <bean id="withdrawalReactionLogic"
    class="iroha.validation.transactions.plugin.impl.sora.XorWithdrawalLimitReactionPluggableLogic">
    <constructor-arg name="queryAPI" ref="queryAPI"/>
    <constructor-arg name="irohaQueryHelper" ref="queryHelper"/>
    <constructor-arg name="limitHolderAccount" value="${SORA_WITHDRAWAL_LIMIT_HOLDER_ACCOUNT_ID}"/>
    <constructor-arg name="limitSetterAccount" value="${SORA_WITHDRAWAL_LIMIT_SETTER_ACCOUNT_ID}"/>
    <constructor-arg name="xorWithdrawalLimitRemainder" ref="xorWithdrawalLimitRemainderReference"/>
    <constructor-arg name="withdrawalAccountId" value="${SORA_WITHDRAWAL_ACCOUNT_ID}"/>
    <constructor-arg name="registrationProvider" ref="accountManager"/>
  </bean>

  <util:list id="logicList" list-class="java.util.ArrayList"
    value-type="iroha.validation.transactions.plugin.PluggableLogic">
    <ref bean="registrationReactionLogic"/>
    <ref bean="quorumReactionLogic"/>
    <ref bean="projectAccountsReactionLogic"/>
    <ref bean="soraDistributionLogic"/>
    <ref bean="withdrawalReactionLogic"/>
  </util:list>

  <!-- PROVIDER CONFIG -->
  <bean id="transactionProvider"
    class="iroha.validation.transactions.core.provider.impl.BasicTransactionProvider">
    <constructor-arg name="transactionVerdictStorage" ref="mongoVerdictStorage"/>
    <constructor-arg name="userQuorumProvider" ref="accountManager"/>
    <constructor-arg name="registrationProvider" ref="accountManager"/>
    <constructor-arg name="irohaReliableChainListener" ref="irohaReliableChainListener"/>
    <constructor-arg name="pluggableLogicList" ref="logicList"/>
    <constructor-arg name="pendingPollingPeriod" value="${PENDING_POLLING_PERIOD}"/>
  </bean>

  <!-- CHAIN LISTENER CONFIG -->
  <bean id="rmqConfig" class="iroha.validation.utils.ValidationUtils"
    factory-method="loadLocalRmqConfig"/>
  <bean id="irohaReliableChainListener"
    class="iroha.validation.listener.BrvsIrohaChainListener">
    <constructor-arg name="rmqConfig" ref="rmqConfig"/>
    <constructor-arg name="queryAPI" ref="queryAPI"/>
    <constructor-arg name="userKeyPair" ref="firstUserKey"/>
    <constructor-arg name="registeredUsersStorage" ref="userStorage"/>
  </bean>

  <!-- SIGNER CONFIG -->
  <bean id="transactionSigner"
    class="iroha.validation.transactions.core.signatory.impl.TransactionSignerImpl">
    <constructor-arg name="irohaAPI" ref="irohaAPI"/>
    <constructor-arg name="brvsAccountId" value="${CREDENTIAL_ACCOUNTID}"/>
    <constructor-arg name="brvsAccountKeyPair" ref="brvsAccountKeyPair"/>
    <constructor-arg name="keyPairs" ref="keysList"/>
    <constructor-arg name="transactionVerdictStorage" ref="mongoVerdictStorage"/>
    <constructor-arg name="registrationProvider" ref="accountManager"/>
  </bean>

  <!-- BRVS DATA CONFIG -->
  <bean id="pubkey" class="java.lang.String">
    <constructor-arg name="original" value="${CREDENTIAL_PUBKEY}"/>
  </bean>
  <bean id="brvsData" class="iroha.validation.transactions.core.provider.impl.util.BrvsData">
    <constructor-arg name="hexPubKey" ref="pubkey"/>
    <constructor-arg name="hostname" value="${BRVS_LOCALHOSTNAME}"/>
  </bean>

  <!-- SERVICE CONFIG -->
  <bean id="serviceContext" class="iroha.validation.config.ValidationServiceContext">
    <constructor-arg name="validator" ref="simpleAggregationValidator"/>
    <constructor-arg name="transactionProvider" ref="transactionProvider"/>
    <constructor-arg name="transactionSigner" ref="transactionSigner"/>
    <constructor-arg name="registrationProvider" ref="accountManager"/>
    <constructor-arg name="brvsData" ref="brvsData"/>
    <constructor-arg name="ruleMonitor">
      <null/>
    </constructor-arg>
  </bean>

  <bean class="iroha.validation.service.impl.ValidationServiceImpl">
    <constructor-arg name="validationServiceContext" ref="serviceContext"/>
  </bean>

  <!-- RULES DEFINITIONS -->
  <bean id="restrictedKeysRule" class="iroha.validation.rules.impl.core.RestrictedKeysRule">
    <constructor-arg name="brvsAccountId" value="${CREDENTIAL_ACCOUNTID}"/>
    <constructor-arg name="restrictedKeys" ref="keysList"/>
  </bean>
  <bean id="minKeysRule" class="iroha.validation.rules.impl.core.MinimumSignatoriesAmountRule">
    <constructor-arg name="queryAPI" ref="queryAPI"/>
    <constructor-arg name="amount" value="${MIN_SIGNATORIES_RULE_AMOUNT}"/>
  </bean>
  <bean id="billingRule" class="iroha.validation.rules.impl.billing.BillingRule">
    <constructor-arg name="getBillingBaseURL" value="${BILLING_URL}"/>
    <constructor-arg name="rmqHost" value="${rmq.host}"/>
    <constructor-arg name="rmqPort" value="${rmq.port}"/>
    <constructor-arg name="rmqExchange" value="${BILLING_RMQ_EXCHANGE}"/>
    <constructor-arg name="rmqRoutingKey" value="${BILLING_RMQ_ROUTINGKEY}"/>
    <constructor-arg name="userDomains" value="${BRVS_USERDOMAINS}"/>
    <constructor-arg name="depositAccounts" value="${BILLING_DEPOSITACCOUNTS}"/>
    <constructor-arg name="ethWithdrawalAccount" value="${BILLING_ETHWITHDRAWALACCOUNT}"/>
    <constructor-arg name="btcWithdrawalAccount" value="${BILLING_BTCWITHDRAWALACCOUNT}"/>
    <constructor-arg name="exchangerAccount" value="${BILLING_EXCHANGERACCOUNT}"/>
  </bean>
  <bean id="quorumBanRule" class="iroha.validation.rules.impl.core.NoQuorumModificationsRule"/>
  <bean id="xorWithdrawalLimitRule" class="iroha.validation.rules.impl.sora.XorWithdrawalLimitRule">
    <constructor-arg name="withdrawalAccountId" value="${SORA_WITHDRAWAL_ACCOUNT_ID}"/>
    <constructor-arg name="xorWithdrawalLimitRemainder" ref="xorWithdrawalLimitRemainderReference"/>
    <constructor-arg name="isDisabled" value="${SORA_WITHDRAWAL_LIMIT_DISABLED}"/>
  </bean>
  <util:map id="rules" map-class="java.util.HashMap">
    <entry key="restrictedKeysRule" value-ref="restrictedKeysRule"/>
    <entry key="minKeysRule" value-ref="minKeysRule"/>
    <entry key="billingRule" value-ref="billingRule"/>
    <entry key="quorumBanRule" value-ref="quorumBanRule"/>
    <entry key="xorWithdrawalLimitRule" value-ref="xorWithdrawalLimitRule"/>
    <!-- More can be added -->
  </util:map>

  <!-- VALIDATOR DEFINITION -->
  <bean id="simpleAggregationValidator"
    class="iroha.validation.validators.impl.SimpleAggregationValidator">
    <constructor-arg ref="rules"/>
  </bean>
</beans>
